pipeline {
    agent any

    tools {
        maven 'Maven 3.9.9'
    }

    environment {
        ENVIRONMENT = "${env.BRANCH_NAME.startsWith('feature/') ? 'dev' : (env.BRANCH_NAME.startsWith('release/') ? 'test' : 'prod')}"
        POM_LOC = "psoft-project-2024-g1/AuthNUserCommand"
        DOCKER_COMPOSE_PATH = "${ENVIRONMENT == 'dev' ? './docker-compose-dev.yml' : (ENVIRONMENT == 'prod' ? './docker-compose-prod.yml' : './docker-compose-test.yml')}"
        CONTAINER_ID = ""
    }



    stages {

        stage('Check Changes') {
            steps {
                script {
                    def changes = sh(script: "git diff --name-only HEAD~1 HEAD", returnStdout: true).trim()
                    if (!changes.contains("AuthNUserCommand/")) {
                        echo "No changes in AuthNUserCommand. Skipping pipeline."
                        currentBuild.result = 'NOT_BUILT'
                        return
                    }
                }
            }
        }


        stage('Print Environment') {
            steps {
                echo "Actual Branch: ${env.BRANCH_NAME}"
                echo "Auto configured Environment: ${ENVIRONMENT}"
            }
        }

        //DEV PIPELINE
        stage('Dev Pipeline') {
            when {
                expression { ENVIRONMENT == 'dev' }
            }
            stages {
                stage('Checkout') {
                    steps {
                        echo "Branch checkout: ${env.BRANCH_NAME}"
                        git url: 'https://1201506@bitbucket.org/1201506/arqsoft-25-1201506-1211439.git',
                            credentialsId: 'jenkins_1201506', branch: "${env.BRANCH_NAME}"
                    }
                }

                stage('Clean + Build') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh 'mvn clean compile test-compile'
                                } else {
                                    bat 'mvn clean compile test-compile'
                                }
                            }
                        }
                    }
                }

                stage('Unit Testing') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh 'mvn test'
                                } else {
                                    bat 'mvn test'
                                }
                            }
                        }
                    }
                }

                stage('Checkstyle') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh 'mvn checkstyle:checkstyle -Dcheckstyle.failOnViolation=false'
                                } else {
                                    bat 'mvn checkstyle:checkstyle -Dcheckstyle.failOnViolation=false'
                                }
                            }
                        }
                    }
                }

                stage('Checkstyle and JaCoCo Reports') {
                    parallel {
                        stage('Checkstyle') {
                            steps {
                                script {
                                    recordIssues(tools: [checkStyle(pattern: '**/target/checkstyle-result.xml')])
                                }
                            }
                        }
                        stage('JaCoCo') {
                            steps {
                                jacoco execPattern: '**/target/jacoco.exec',
                                       classPattern: '**/target/classes',
                                       sourcePattern: '**/src/main/java',
                                       inclusionPattern: '**/*.class'
                            }
                        }
                    }
                }

                stage('Install') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh 'mvn install -DskipTests -DskipITs -DskipPitest'
                                } else {
                                    bat 'mvn install -DskipTests -DskipITs -DskipPitest'
                                }
                            }
                        }
                    }
                }



                stage('Docker Compose Build and Up') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                echo "Building and running Docker Compose..."
                                if (isUnix()) {
                                    sh '''
                                        docker-compose -f ${DOCKER_COMPOSE_PATH} up --build --force-recreate -d
                                        echo "Docker Compose build and up completed."
                                        sleep 3
                                    '''
                                } else {
                                    bat '''
                                        docker-compose -f ${DOCKER_COMPOSE_PATH} up --build --force-recreate -d
                                        echo Docker Compose build and up completed.
                                        timeout /T 3
                                    '''
                                }
                            }
                        }
                    }
                }

                stage('IT Tests on Container') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh '''
                                        CONTAINER_ID=$(docker ps -qf "name=users")
                                        if [ -z "$CONTAINER_ID" ]; then
                                            echo "No container found with the name 'users'."
                                            exit 1
                                        fi
                                        #docker wait $CONTAINER_ID
                                        docker exec -w /app $CONTAINER_ID mvn test failsafe:integration-test failsafe:verify
                                    '''
                                } else {
                                    bat '''
                                        FOR /F "tokens=*" %%i IN ('docker ps -qf "name=users"') DO SET CONTAINER_ID=%%i
                                        IF "%CONTAINER_ID%"=="" (
                                            echo No container found with the name 'users'.
                                            EXIT /B 1
                                        )
                                        REM docker wait %CONTAINER_ID%
                                        docker exec -w /app $CONTAINER_ID mvn test failsafe:integration-test failsafe:verify
                                    '''
                                }
                            }
                        }
                    }
                }

                stage('Stop Containers') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh '''
                                        CONTAINER_IDS=$(docker ps -qf "name=user")
                                        if [ -n "$CONTAINER_IDS" ]; then
                                            echo "Stopping containers with 'user' in the name..."
                                            docker stop $CONTAINER_IDS
                                        else
                                            echo "No containers found with the name containing 'user'."
                                        fi
                                    '''
                                } else {
                                    bat '''
                                        FOR /F "tokens=*" %%i IN ('docker ps -qf "name=user"') DO (
                                            echo Stopping container %%i...
                                            docker stop %%i
                                        )
                                    '''
                                }
                            }
                        }
                    }
                }

                stage('Clean Up Containers and Resources') {
                    steps {
                        script {
                            if (isUnix()) {
                                sh 'docker container prune -f'
                                sh 'docker volume prune -f'
                                sh 'docker image prune -af'
                            } else {
                                bat 'docker container prune -f'
                                bat 'docker volume prune -f'
                                bat 'docker image prune -af'
                            }
                        }
                    }
                }
            }
        }

        //TEST PIPELINE
        stage('Test Pipeline') {
            when {
                expression { ENVIRONMENT == 'test' }
            }
            stages {
                stage('Checkout') {
                    steps {
                        echo "Branch checkout: ${env.BRANCH_NAME}"
                        git url: 'https://1201506@bitbucket.org/1201506/arqsoft-25-1201506-1211439.git',
                            credentialsId: 'jenkins_1201506', branch: "${env.BRANCH_NAME}"
                    }
                }

                stage('Clean + Build') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh 'mvn clean compile test-compile'
                                } else {
                                    bat 'mvn clean compile test-compile'
                                }
                            }
                        }
                    }
                }

                stage('Checkstyle') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh 'mvn checkstyle:checkstyle -Dcheckstyle.failOnViolation=false'
                                } else {
                                    bat 'mvn checkstyle:checkstyle -Dcheckstyle.failOnViolation=false'
                                }
                            }
                        }
                    }
                }

                stage('Checkstyle and JaCoCo Reports') {
                    parallel {
                        stage('Checkstyle') {
                            steps {
                                script {
                                    recordIssues(tools: [checkStyle(pattern: '**/target/checkstyle-result.xml')])
                                }
                            }
                        }
                        stage('JaCoCo') {
                            steps {
                                jacoco execPattern: '**/target/jacoco.exec',
                                       classPattern: '**/target/classes',
                                       sourcePattern: '**/src/main/java',
                                       inclusionPattern: '**/*.class'
                            }
                        }
                    }
                }

                stage('Install') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh 'mvn install -DskipTests -DskipITs -DskipPitest'
                                } else {
                                    bat 'mvn install -DskipTests -DskipITs -DskipPitest'
                                }
                            }
                        }
                    }
                }

                stage('Docker Image Build') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                echo "Building and running Docker Compose..."
                                if (isUnix()) {
                                    sh 'docker build -t lmsusers .'
                                } else {
                                    bat 'docker build -t lmsusers .'
                                }
                            }
                        }
                    }
                }

               stage('Docker Stack Deploy') {
                   steps {
                       script {
                           dir(POM_LOC) {
                               echo "Building and running Docker Compose..."
                               if (isUnix()) {
                                   sh '''
                                       # Stop and remove existing containers before deploy
                                       EXISTING_CONTAINERS=$(docker ps -qf "name=users_postgres")
                                       if [ -n "$EXISTING_CONTAINERS" ]; then
                                           echo "Stopping and removing existing containers..."
                                           docker stop $EXISTING_CONTAINERS
                                           docker rm -f $EXISTING_CONTAINERS
                                       fi

                                       # Find containers using the users_postgres_volume and remove them
                                       CONTAINERS_USING_VOLUME=$(docker ps -q --filter volume=users_postgres_volume)
                                       if [ -n "$CONTAINERS_USING_VOLUME" ]; then
                                           echo "Stopping and removing containers using users_postgres_volume..."
                                           docker stop $CONTAINERS_USING_VOLUME
                                           docker rm -f $CONTAINERS_USING_VOLUME
                                       fi

                                       # Remove associated volumes
                                       EXISTING_VOLUMES=$(docker volume ls -qf "name=users_postgres")
                                       if [ -n "$EXISTING_VOLUMES" ]; then
                                           echo "Removing associated volumes..."
                                           docker volume rm $EXISTING_VOLUMES
                                       fi

                                       # Now deploy Docker stack
                                       docker stack deploy -c ${DOCKER_COMPOSE_PATH} users
                                       echo "Docker Compose build and up completed."
                                       sleep 50

                                       # Get all container IDs matching 'users_postgres'
                                       CONTAINER_IDS=$(docker ps -qf "name=users_postgres")
                                       if [ -z "$CONTAINER_IDS" ]; then
                                           echo "Postgres containers not found."
                                           exit 7
                                       fi

                                       # Loop through each container ID and execute SQL command
                                       for CONTAINER_IDD in $CONTAINER_IDS; do
                                           docker exec $CONTAINER_IDD psql -U postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE test_users_1;"
                                           docker exec $CONTAINER_IDD psql -U postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE test_users_2;"
                                           docker exec $CONTAINER_IDD psql -U postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE test_users_3;"
                                           docker exec $CONTAINER_IDD psql -U postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE test_users_4;"
                                       done
                                   '''
                               } else {
                                   bat '''
                                       REM Stop and remove existing containers before deploy
                                       FOR /F "tokens=*" %%i IN ('docker ps -qf "name=users_postgres"') DO (
                                           SET CONTAINER_IDD=%%i
                                           REM Stop and remove the container
                                           docker stop %%i
                                           docker rm %%i
                                       )

                                       REM Find containers using the users_postgres_volume and remove them
                                       FOR /F "tokens=*" %%i IN ('docker ps -q --filter volume=users_postgres_volume') DO (
                                           SET CONTAINER_IDD=%%i
                                           REM Stop and remove the container
                                           docker stop %%i
                                           docker rm %%i
                                       )

                                       REM Remove associated volumes
                                       FOR /F "tokens=*" %%i IN ('docker volume ls -qf "name=users_postgres"') DO (
                                           docker volume rm %%i
                                       )

                                       REM Now deploy Docker stack
                                       docker stack deploy -c ${DOCKER_COMPOSE_PATH} users
                                       echo Docker Compose build and up completed.
                                       timeout /T 7

                                       REM Get all container IDs matching 'users_postgres'
                                       FOR /F "tokens=*" %%i IN ('docker ps -qf "name=users_postgres"') DO (
                                           SET CONTAINER_IDD=%%i
                                           REM Execute SQL command in each container
                                           docker exec %%i psql -U postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE test_users_1;"
                                           docker exec %%i psql -U postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE test_users_2;"
                                           docker exec %%i psql -U postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE test_users_3;"
                                           docker exec %%i psql -U postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE test_users_4;"
                                       )
                                   '''
                               }
                           }
                       }
                   }
               }





               stage('Unit and IT Tests on Container') {
                   steps {
                       script {
                           dir(POM_LOC) {
                               if (isUnix()) {
                                   sh '''
                                       CONTAINER_IDS=$(docker ps -qf "name=users_users")
                                       if [ -z "$CONTAINER_IDS" ]; then
                                           echo "No container found with the name 'users_users'."
                                           exit 1
                                       fi
                                       for CONTAINER_ID in $CONTAINER_IDS; do
                                           echo "Running Unit and IT tests on container $CONTAINER_ID"

                                           docker exec -w /app $CONTAINER_ID mvn test failsafe:integration-test failsafe:verify
                                       done
                                   '''
                               } else {
                                   bat '''
                                       FOR /F "tokens=*" %%i IN ('docker ps -qf "name=users_users"') DO SET CONTAINER_ID=%%i
                                       IF "%CONTAINER_ID%"=="" (
                                           echo No container found with the name 'users_users'.
                                           EXIT /B 1
                                       )
                                       docker exec -w /app %%i mvn test failsafe:integration-test failsafe:verify

                                       echo Tests failed on container %%i with exit code %TEST_EXIT_CODE%.
                                   '''
                               }
                           }
                       }
                   }
               }

               stage('Smoke Tests') {
                   steps {
                       script {
                           dir(POM_LOC) {
                               if (isUnix()) {
                                   sh '''
                                       CONTAINER_IDS=$(docker ps -qf "name=users_users")
                                       if [ -z "$CONTAINER_IDS" ]; then
                                           echo "No container found with the name 'users_users'."
                                           exit 1
                                       fi
                                       for CONTAINER_ID in $CONTAINER_IDS; do
                                           echo "Running Smoke Tests on container $CONTAINER_ID"
                                           docker exec -w /app $CONTAINER_ID mvn test -Dtest=pt.psoft.g1.psoftg1.auth.SmokeTeste
                                       done
                                   '''
                               } else {
                                   bat '''
                                       FOR /F "tokens=*" %%i IN ('docker ps -qf "name=users_users"') DO SET CONTAINER_ID=%%i
                                       IF "%CONTAINER_ID%"=="" (
                                           echo No container found with the name 'users_users'.
                                           EXIT /B 1
                                       )
                                       docker exec -w /app %%i mvn test -Dtest=pt.psoft.g1.psoftg1.auth.SmokeTeste
                                       IF "%TEST_EXIT_CODE%"=="0" (
                                           echo Smoke tests completed successfully on container %%i, failing pipeline.
                                           EXIT /B 1
                                       )
                                       echo Smoke tests failed on container %%i with exit code %TEST_EXIT_CODE%.
                                   '''
                               }
                           }
                       }
                   }
               }

                stage('Performance Tests') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh '''
                                        CONTAINER_IDS=$(docker ps -qf "name=users_users")
                                        if [ -z "$CONTAINER_IDS" ]; then
                                            echo "No container found with the name 'users_users'."
                                            exit 1
                                        fi
                                        for CONTAINER_ID in $CONTAINER_IDS; do
                                            echo "Running tests on container $CONTAINER_ID"
                                            docker exec -it $CONTAINER_ID jmeter -n -t /app/src/test/resources/assets/MicroserviceTestUsers.jmx -l /results_$CONTAINER_ID.jtl
                                            TEST_EXIT_CODE=$?
                                            if [ $TEST_EXIT_CODE -eq 0 ]; then
                                                echo "Tests completed successfully on container $CONTAINER_ID, failing pipeline."
                                                exit 1
                                            fi
                                            echo "Tests failed on container $CONTAINER_ID with exit code $TEST_EXIT_CODE."
                                        done
                                    '''
                                } else {
                                    bat '''
                                        FOR /F "tokens=*" %%i IN ('docker ps -qf "name=users_users"') DO SET CONTAINER_ID=%%i
                                        IF "%CONTAINER_ID%"=="" (
                                            echo No container found with the name 'users_users'.
                                            EXIT /B 1
                                        )
                                        docker exec -it %%i jmeter -n -t /app/src/test/resources/assets/MicroserviceTestUsers.jmx -l /results_%%i.jtl
                                        SET TEST_EXIT_CODE=%ERRORLEVEL%
                                        IF "%TEST_EXIT_CODE%"=="0" (
                                            echo Tests completed successfully on container %%i, failing pipeline.
                                            EXIT /B 1
                                        )
                                        echo Tests failed on container %%i with exit code %TEST_EXIT_CODE%.
                                    '''
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline '${env.JOB_NAME}' finished. Branch: ${env.BRANCH_NAME}, Environment: ${ENVIRONMENT}"
            echo 'Workspace cleaned.'
        }
        success {
            echo "Pipeline '${env.JOB_NAME}' finished with success. Branch: ${env.BRANCH_NAME}, Environment: ${ENVIRONMENT}"
        }
        failure {
            echo "Pipeline '${env.JOB_NAME}' failed. Branch: ${env.BRANCH_NAME}, Environment: ${ENVIRONMENT}"
        }
    }
}
