pipeline {
    agent any

    tools {
        maven 'Maven 3.9.9'
    }

    environment {
        // Determinar o ambiente com base no nome da branch
        ENVIRONMENT = "${env.BRANCH_NAME.startsWith('feature/') ? 'dev' : (env.BRANCH_NAME.startsWith('release/') ? 'test' : 'prod')}"
        POM_LOC = "psoft-project-2024-g1/AuthNUserCommand"
    }

    stages {
        stage('Print Environment') {
            steps {
                echo "Actual Branch: ${env.BRANCH_NAME}"
                echo "Auto configured Environment: ${ENVIRONMENT}"
            }
        }

        stage('Dev Pipeline') {
            when {
                expression { ENVIRONMENT == 'dev' }
            }
            stages {
                stage('Checkout') {
                    steps {
                        echo "Branch checkout: ${env.BRANCH_NAME}"
                        git url: 'https://1201506@bitbucket.org/1201506/arqsoft-25-1201506-1211439.git',
                            credentialsId: 'jenkins_1201506', branch: "${env.BRANCH_NAME}"
                    }
                }

                stage('Clean + Build') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh 'mvn clean compile test-compile'
                                } else {
                                    bat 'mvn clean compile test-compile'
                                }
                            }
                        }
                    }
                }

                stage('Unit + Integration Testing') {
                    parallel {
                        stage('Unit Testing') {
                            steps {
                                script {
                                    dir(POM_LOC) {
                                        if (isUnix()) {
                                            sh 'mvn surefire:test'
                                        } else {
                                            bat 'mvn surefire:test'
                                        }
                                    }
                                }
                            }
                        }

                        stage('Integration Testing') {
                            steps {
                                script {
                                    dir(POM_LOC) {
                                        if (isUnix()) {
                                            sh 'mvn failsafe:integration-test failsafe:verify'
                                        } else {
                                            bat 'mvn failsafe:integration-test failsafe:verify'
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                stage('Checkstyle') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh 'mvn checkstyle:checkstyle -Dcheckstyle.failOnViolation=false'
                                } else {
                                    bat 'mvn checkstyle:checkstyle -Dcheckstyle.failOnViolation=false'
                                }
                            }
                        }
                    }
                }

                stage('Checkstyle and JaCoCo Reports') {
                    parallel {
                        stage('Checkstyle') {
                            steps {
                                script {
                                    recordIssues(tools: [checkStyle(pattern: '**/target/checkstyle-result.xml')])
                                }
                            }
                        }
                        stage('JaCoCo') {
                            steps {
                                jacoco execPattern: '**/target/jacoco.exec',
                                       classPattern: '**/target/classes',
                                       sourcePattern: '**/src/main/java',
                                       inclusionPattern: '**/*.class'
                            }
                        }
                    }
                }

                stage('Install') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh 'mvn install -DskipTests -DskipITs -DskipPitest'
                                } else {
                                    bat 'mvn install -DskipTests -DskipITs -DskipPitest'
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline '${env.JOB_NAME}' finalizada. Branch: ${env.BRANCH_NAME}, Ambiente: ${ENVIRONMENT}"
            echo 'Espaço de trabalho limpo.'
        }
        success {
            echo "Pipeline '${env.JOB_NAME}' concluída com sucesso. Branch: ${env.BRANCH_NAME}, Ambiente: ${ENVIRONMENT}"
        }
        failure {
            echo "Pipeline '${env.JOB_NAME}' falhou. Branch: ${env.BRANCH_NAME}, Ambiente: ${ENVIRONMENT}"
        }
    }
}
