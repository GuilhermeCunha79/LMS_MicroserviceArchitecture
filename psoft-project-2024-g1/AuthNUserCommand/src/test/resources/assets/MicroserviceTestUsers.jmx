<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Microservice Test">
        <intProp name="ThreadGroup.num_threads">5</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">300</longProp>
        <longProp name="ThreadGroup.delay">10</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1000</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login - POST">
          <stringProp name="HTTPSampler.domain">172.17.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8094</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">api/public/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;: &quot;maria@gmail.com&quot;,&#xd;
    &quot;password&quot;: &quot;Mariaroberta!123&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// Define a variável global com o valor do token extraído
props.put(&apos;bearerToken&apos;, vars.get(&apos;bearerToken&apos;))
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">bearerToken</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization: (.*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Scope.variable">${__setProperty(bearerToken, ${bearerToken},)} </stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">Authorizarion</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// Define o limite mínimo de throughput desejado
double minThroughput = 25; // 25r/s

// Obtém o resultado da amostra anterior
def result = prev;

// Inicializa variáveis para cálculo de throughput
double totalRequests = 0;
double totalTimeSeconds = 0;

// Inicializa variáveis para cálculo de falhas
int failedRequests = 0;
int minSamplesForFailureCheck = 500; // Limite mínimo de amostras para verificação de falhas

// Recupera o valor de totalSampleCount e totalTimeSeconds armazenados (se existirem) ou define como 0
def totalSampleCount = vars.get(&apos;totalSampleCount&apos;) ? vars.get(&apos;totalSampleCount&apos;).toInteger() : 0;
def accumulatedTime = vars.get(&apos;totalTimeSeconds&apos;) ? vars.get(&apos;totalTimeSeconds&apos;).toDouble() : 0.0;

// Verifica se o resultado não é nulo e soma os tempos e contagens de amostras
if (result) {
    totalRequests += result.getSampleCount();
    accumulatedTime += result.getTime() / 1000.0; // Tempo em segundos
    
    // Verifica se a amostra falhou
    if (result.isSuccessful() == false) {
        failedRequests += 1;
    }
    totalSampleCount += result.getSampleCount(); // Acumula a contagem de amostras
}

// Armazena o totalSampleCount e accumulatedTime atualizados na variável de contexto para futuras iterações
vars.put(&apos;totalSampleCount&apos;, totalSampleCount.toString());
vars.put(&apos;totalTimeSeconds&apos;, accumulatedTime.toString());

// Calcula o throughput (requests por segundo) somente se o número mínimo de amostras for atingido
if (totalSampleCount &gt;= minSamplesForFailureCheck) {
    double throughput = minSamplesForFailureCheck / accumulatedTime; // Usa o tempo total acumulado

    // Número de threads
    int numThreads = 5;

    // Multiplica o throughput pelo número de threads
    double throughputAdjusted = throughput * numThreads * 2;

    // Loga o throughput ajustado
    log.info(&quot;Throughput calculado e ajustado (por &quot; + numThreads + &quot; threads): &quot; + throughputAdjusted + &quot; req/s&quot;);

    // Verifica se o throughput ajustado está abaixo do limite
    if (throughputAdjusted &lt; minThroughput) {
        AssertionResult.setFailure(true);
        AssertionResult.setFailureMessage(&quot;Throughput abaixo do limite: &quot; + throughputAdjusted + &quot; req/s (mínimo: &quot; + minThroughput + &quot;)&quot;);
        return 0;
    }

    // Calcula a percentagem de falhas se o número mínimo de amostras for atingido
    double failurePercentage = (failedRequests / totalSampleCount) * 100;

    return 1;
}
</stringProp>
        </JSR223Assertion>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
